import telebot
from telebot import types
import requests
import time
import math


TOKEN = '7983424205:AAFVmLRKURpjNOs6jpgN1r7KGTTDAMdE0GU'
bot = telebot.TeleBot(TOKEN)


REQUEST_LIMIT = 10
TIME_WINDOW = 24 * 60 * 60


user_requests = {}


selected_category = {}


categories = {
    "–ö–∞—Ñ–µ": "cafe",
    "–†–µ—Å—Ç–æ—Ä–∞–Ω–∏": "restaurant",
    "–ê–ø—Ç–µ–∫–∏": "pharmacy",
    "–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç–∏": "supermarket",
    "–°–¢–û": "car_repair",
    "–ü–æ–±—É—Ç. —Ç–µ—Ö–Ω—ñ–∫–∞": "electronics",
    "–ö—Ä–∞—Å–∏–≤—ñ –≤–∏–¥–∏": "viewpoint",
    "–†–æ–∑–≤–∞–≥–∏": "entertainment"
}


@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for name in categories.keys():
        markup.add(types.KeyboardButton(name))
        bot.send_message(chat_id, "–æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é", reply_markup=markup)


def can_send_request(chat_id):
    current_time = time.time()
    requestes = user_requests.get(chat_id, [])

    requestes = [req for req in requestes if current_time - req < TIME_WINDOW]
    if len(requests) >= REQUEST_LIMIT:
        return False
    requests.append(current_time)
    user_requests[chat_id] = requests
    return True

@bot.message_handler(func=lambda message: True, content_types=['text'])
def handle_text(message):
    chat_id = message.chat.id
    text = message.text
    if text in categories:
        selected_category[chat_id] = categories[text]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        location_button = types.KeyboardButton(text="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", request_location=True)
        markup.add(location_button)
        bot.send_message(chat_id, f"–í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: {text}. –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é.",
                         reply_markup=markup)
    else:
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.")

@bot.message_handler(content_types=['location'])
def handle_location(message):
    chat_id = message.chat.id
    if not can_send_request(chat_id):
        bot.send_message(chat_id, "–í–∏ –¥–æ—Å—è–≥–ª–∏ –ª—ñ–º—ñ—Ç—É –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    if chat_id not in selected_category:
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.")
        return
    latitude = message.location.latitude
    longitude = message.location.longitude
    category = selected_category[chat_id]
    bot.send_message(chat_id, "üîç –®—É–∫–∞—é –º—ñ—Å—Ü—è –ø–æ–±–ª–∏–∑—É...")
    places = get_places(latitude, longitude, category)
    if not places:
        bot.send_message(chat_id, "–ù–∞–∂–∞–ª—å, –º—ñ—Å—Ü—å –ø–æ–¥—ñ–±–Ω–∏—Ö –¥–æ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É –Ω–µ –±—É–ª–æ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    markup = types.InlineKeyboardMarkup()
    for place in places:
        name = place['name']
        lat = place['lat']
        lon = place['lon']
        distance = int(place['distance'])
        maps_url = f"https://www.google.com/maps/dir/?api=1&destination={lat},{lon}"
        button = types.InlineKeyboardButton(text=f"{name} ({distance} –º)", url=maps_url)
        markup.add(button)
    bot.send_message(chat_id, "–ú—ñ—Å—Ü—è –ø–æ—Ä—É—á (–∑–∞ –≤—ñ–¥—Å—Ç–∞–Ω–Ω—é):", reply_markup=markup)

def get_places(lat, lon, category):
    overpass_url = "https://overpass-api.de/api/interpreter"
    if category in ["cafe", "restaurant", "pharmacy", "car_repair"]:
        query = f"""
        [out:json];
        node[amenity={category}](around:1000,{lat},{lon});
        out;
        """
    elif category in ["supermarket", "electronics"]:
        query = f"""
        [out:json];
        node[shop={category}](around:1000,{lat},{lon});
        out;
        """
    elif category == "viewpoint":
        query = f"""
        [out:json];
        node[tourism=viewpoint](around:1000,{lat},{lon});
        out;
        """
    elif category == "entertainment":
        query = f"""
        [out:json];
        node[leisure=park](around:1000,{lat},{lon});
        out;
        """
    else:
        return []
    response = requests.get(overpass_url, params={'data': query})
    data = response.json()
    places = []
    for element in data['elements']:
        name = element['tags'].get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∏')
        el_lat = element['lat']
        el_lon = element['lon']
        distance = calculate_distance(lat, lon, el_lat, el_lon)
        places.append({'name': name, 'lat': el_lat, 'lon': el_lon, 'distance': distance})
    # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –≤—ñ–¥—Å—Ç–∞–Ω–Ω—é
    places.sort(key=lambda x: x['distance'])
    return places[:10]

def calculate_distance(lat1, lon1, lat2, lon2):
    R = 6371000  # –†–∞–¥—ñ—É—Å –ó–µ–º–ª—ñ –≤ –º–µ—Ç—Ä–∞—Ö
    phi1 = math.radians(lat1)
    phi2 = math.radians(lat2)
    delta_phi = math.radians(lat2 - lat1)
    delta_lambda = math.radians(lon2 - lon1)
    a = math.sin(delta_phi / 2) ** 2 + \
        math.cos(phi1) * math.cos(phi2) * \
        math.sin(delta_lambda / 2) ** 2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    return R * c

bot.polling()